
import { NextRequest, NextResponse } from 'next/server';
import getDb from '@/lib/mongodb';
import bcrypt from 'bcryptjs';
import type { User } from '@/lib/types';
import { ObjectId } from 'mongodb';

export async function POST(request: NextRequest) {
  try {
    const { name, email, password } = await request.json();

    if (!name || !email || !password) {
      return NextResponse.json({ message: 'Missing required fields: name, email, and password.' }, { status: 400 });
    }
    if (password.length < 8) {
      return NextResponse.json({ message: 'Password must be at least 8 characters long.' }, { status: 400 });
    }

    const db = await getDb();
    const usersCollection = db.collection<Omit<User, 'id'> & { passwordHash: string }>('users');

    const existingUser = await usersCollection.findOne({ email: email.toLowerCase() });
    if (existingUser) {
      return NextResponse.json({ message: 'Email already in use. Please try a different email.' }, { status: 409 });
    }

    const passwordHash = await bcrypt.hash(password, 10);

    const newUserDocument = {
      // _id will be generated by MongoDB
      name,
      email: email.toLowerCase(),
      passwordHash, // Store the hash, not the plain password
      reputation: 0,
      joinedDate: new Date().toISOString(),
      avatarUrl: `https://placehold.co/100x100.png?text=${name.charAt(0)}`,
      bio: '',
    };

    const result = await usersCollection.insertOne(newUserDocument);

    if (!result.insertedId) {
        throw new Error('Failed to insert user into database.');
    }

    const createdUser: User = {
        _id: result.insertedId,
        id: result.insertedId.toHexString(),
        name: newUserDocument.name,
        email: newUserDocument.email,
        reputation: newUserDocument.reputation,
        joinedDate: newUserDocument.joinedDate,
        avatarUrl: newUserDocument.avatarUrl,
        bio: newUserDocument.bio,
    };

    return NextResponse.json({ message: 'User registered successfully!', user: createdUser }, { status: 201 });

  } catch (error) {
    console.error('Registration API error:', error);
    const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred during registration.';
    return NextResponse.json({ message: errorMessage }, { status: 500 });
  }
}
